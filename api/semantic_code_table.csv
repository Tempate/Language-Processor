Pointer,Code
1.1,"self.current_table.add({""lexeme"": self.find_id(stack.get_element(2))[""lexeme""], ""type"": ""function"", ""return_type"": stack.find(""FT"")[""type""] })"
1.2,self.current_table = self.symbol_tables.pop(1)
1.3,"if stack.find(""R"")[""type""] != stack.find(""FT"")[""type""]: self.error(""Incorrect return type"")"
1.4,self.current_table.save()
1.5,self.current_table = self.symbol_tables[0]
1.6,"self.symbol_tables[0].set(self.find_id(stack.get_element(7))[""lexeme""], ""param_count"", stack.find(""FD"")[""param_count""])"
1.7,"self.symbol_tables[0].set(self.find_id(stack.get_element(8))[""lexeme""], ""param_type"", stack.find(""FD"")[""param_type""])"
2.1,"stack.set(""FT"", ""type"", stack.find(""T"")[""type""])"
2.2,"stack.set(""FT"", ""type"", """")"
3.1,"self.current_table.add({""lexeme"": self.find_id(stack.get_element(2))[""lexeme""], ""type"": stack.find(""T"")[""type""], ""shift"": self.current_table.shift})"
3.2,"stack.set(""FD"", ""param_count"", 1)"
3.3,"stack.set(""FD"", ""param_type"", [stack.find(""T"")[""type""]])"
3.5,"self.current_table.shift += widths[stack.find(""T"")[""type""]]"
3.6,"stack.set(""FD"", ""param_count"", stack.find(""FD"")[""param_count""] + stack.find(""PD"")[""param_count""])"
3.7,"stack.set(""FD"", ""param_type"", stack.find(""FD"")[""param_type""] + stack.find(""PD"")[""param_type""])"
3.8,"stack.set(""PD"", ""param_count"", stack.find(""FD"")[""param_count""])"
3.9,"stack.set(""PD"", ""param_type"", stack.find(""FD"")[""param_type""])"
4.1,"stack.set(""FV"", ""param_count"", stack.find(""PV"")[""param_count""] + 1)"
4.2,"stack.set(""FV"", ""param_type"", [stack.find(""L"")[""return_type""] if stack.find(""L"")[""type""] == ""function"" else stack.find(""L"")[""type""]] + stack.find(""PV"")[""param_type""])"
4.3,"stack.set(""PV"", ""param_count"", stack.find(""FV"")[""param_count""])"
4.4,"stack.set(""PV"", ""param_type"", stack.find(""FV"")[""param_type""])"
5.1,"stack.set(""SC"", ""type"", stack.find(""Z"")[""type""])"
6.1,"if stack.find(""L"")[""type""] != ""boolean"" and stack.find(""L"")[""return_type""] != ""boolean"": self.error(""Wrong boolean type"")"
6.2,"if stack.find(""S"")[""type""] == ""error"": self.error(""Wrong contents for if statement"")"
7.1,"if self.find_id(stack.get_element(4))[""type""]: self.error(""Variable is already declared"")"
7.2,"if stack.find(""D"")[""type""] and stack.find(""D"")[""type""] != stack.find(""T"")[""type""]: self.error(""Types when declaring variable don't match"")"
7.3,"self.current_table.add({""lexeme"": self.find_id(stack.get_element(6))[""lexeme""], ""type"": stack.find(""T"")[""type""], ""shift"": self.current_table.shift})"
8.1,"if stack.find(""I"")[""type""] != ""number"" and stack.find(""I"")[""return_type""] != ""number"": self.error(""Switch argument is not a number"")"
8.2,"if stack.find(""SC"")[""type""] != ""number"": self.error(""Wrong type for cases"")"
9.1,"stack.set(""D"", ""type"", stack.find(""L"")[""type""])"
9.2,"if not self.find_id(stack.get_element(4)) or self.find_id(stack.get_element(4))[""type""] not in [""string"", ""number""]: self.error(""Variable is already declared"")"
10.1,"if not self.find_id(stack.get_element(4)): self.error(""Wrong id"")"
10.2,"if stack.find(""SI"")[""type""] and self.find_id(stack.get_element(5))[""type""] != stack.find(""SI"")[""type""] and self.find_id(stack.get_element(5))[""type""] != stack.find(""SI"")[""return_type""]: self.error(""Wrong types"")"
10.4,"if stack.find(""SI"")[""param_type""] != self.find_id(stack.get_element(6))[""param_type""]: self.error(""Wrong param types"")"
10.5,"if self.find_id(stack.get_element(7))[""type""] == ""function"" and self.find_id(stack.get_element(7))[""param_count""] != stack.find(""SI"")[""param_count""]: self.error(""Wrong param count"")"
11.1,"stack.set(""LE"", ""type"", stack.find(""Z"")[""type""])"
12.1,"stack.set(""SI"", ""type"", stack.find(""L"")[""type""])"
12.2,"stack.set(""SI"", ""return_type"", stack.find(""L"")[""return_type""])"
13.1,"stack.set(""SI"", ""type"", ""number"") if stack.find(""L"")[""type""] == ""number"" else self.error(""Wrong types"")"
14.1,"stack.set(""SI"", ""param_count"", stack.find(""P"")[""param_count""])"
14.2,"stack.set(""SI"", ""param_type"", stack.find(""P"")[""param_type""]) "
15.1,"stack.set(""LE"", ""type"", ""boolean"") if stack.find(""L"")[""type""] == ""boolean"" else self.error(""Wrong types"")"
15.2,"if stack.find(""LE"")[""type""] != ""boolean"" or stack.find(""L"")[""type""] != ""boolean"": self.error(""Wrong types"")"
16.1,"stack.set(""L"", ""type"", stack.find(""E"")[""type""])"
16.2,"stack.set(""L"", ""return_type"", stack.find(""E"")[""return_type""])"
16.3,"if stack.find(""LL"")[""type""] and stack.find(""LL"")[""type""] != stack.find(""E"")[""type""]: self.error(""Wrong types"")"
17.1,"stack.set(""LL"", ""type"", ""boolean"") if stack.find(""L"")[""type""] == ""boolean"" or stack.find(""L"")[""return_type""] == ""boolean"" else self.error(""Wrong types"")"
18.1,"stack.set(""E"", ""type"", stack.find(""I"")[""type""])"
18.2,"stack.set(""E"", ""return_type"", stack.find(""I"")[""return_type""])"
18.3,"if stack.find(""EE"")[""type""] and stack.find(""EE"")[""type""] != stack.find(""I"")[""type""]: self.error(""Wrong types"")"
18.4,"if stack.find(""I"")[""type""] == ""number"" and stack.find(""EE"")[""type""] == ""number"": stack.set(""E"", ""type"", ""boolean"")"
18.5,"stack.set(""EE"", ""type"", ""number"") if stack.find(""E"")[""type""] == ""number"" or stack.find(""E"")[""return_type""] == ""number"" else self.error(""Wrong types"")"
19.1,"stack.set(""I"", ""type"", stack.find(""Y"")[""type""])"
19.2,"stack.set(""I"", ""return_type"", stack.find(""Y"")[""return_type""])"
19.3,"if stack.find(""II"")[""type""] and stack.find(""II"")[""type""] != stack.find(""Y"")[""type""]: self.error(""Wrong types"")"
19.4,"stack.set(""II"", ""type"", ""number"") if stack.find(""I"")[""type""] == ""number"" or stack.find(""I"")[""return_type""] == ""number"" else self.error(""Wrong types"")"
20.1,"stack.set(""Y"", ""type"", stack.find(""L"")[""type""])"
21.1,"if not self.find_id(stack.get_element(3)): self.error(""Undeclared ID"")"
21.2,"if self.find_id(stack.get_element(4))[""type""] == ""function"": stack.set(""Y"", ""return_type"", self.find_id(stack.get_element(4))[""return_type""])"
21.3,"stack.set(""Y"", ""type"", self.find_id(stack.get_element(5))[""type""])"
21.5,"if self.find_id(stack.get_element(6))[""type""] == ""function"" and self.find_id(stack.get_element(6))[""param_count""] != stack.find(""P"")[""param_count""]: self.error(""Wrong number of arguments"")"
21.6,"if self.find_id(stack.get_element(7))[""type""] == ""function"" and self.find_id(stack.get_element(7))[""param_type""] != stack.find(""P"")[""param_type""]: self.error(""Wrong types of arguments"")"
22.1,"stack.set(""Y"", ""type"", stack.find(""Z"")[""type""])"
23.1,"stack.set(""P"", ""type"", stack.find(""FV"")[""type""])"
23.2,"stack.set(""P"", ""param_type"", stack.find(""FV"")[""param_type""])"
23.3,"stack.set(""P"", ""param_count"", stack.find(""FV"")[""param_count""])"
25.1,"stack.set(""T"", ""type"", ""number"")"
25.2,"stack.set(""T"", ""shift"", 1)"
26.1,"stack.set(""T"", ""type"", ""boolean"")"
27.1,"stack.set(""T"", ""type"", ""string"")"
27.2,"stack.set(""T"", ""shift"", 64)"
28.1,"stack.set(""Z"", ""type"", ""number"")"
28.2,"stack.set(""Z"", ""type"", ""boolean"")"
28.3,"stack.set(""Z"", ""type"", ""string"")"
29.1,"stack.set(""R"", ""type"", stack.find(""L"")[""type""])"
29.2,"stack.set(""R"", ""return_type"", stack.find(""L"")[""type""])"
29.3,"stack.set(""R"", ""return_type"", ""void"")"